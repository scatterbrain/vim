-module(@module@).

-behaviour(gen_server).

%%%
%%% user defined start functions 
%%% TODO: CHANGE ARITY for start* :)
%%%
-export([start/0, start_link/0, stop/1]). 

%%%
%%% gen_server call back functions
%%%
-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2]). 

%%% ---------------------------------------------------------------------------
%%%
%%% public interface functions
%%%


%%% ---------------------------------------------------------------------------
%%%
%%% gen_server behaviour callback interface
%%%

%%% init/start/stop procedures {{{
start() -> gen_server:start(?MODULE, {}, []).
start_link() -> gen_server:start_link(?MODULE, {}, []).
stop(Pid)  -> gen_server:call(Pid, die, 10000).

init(_None) ->
		   { ok,  
			 % TODO: PASS INITIAL STATE HERE
		     nil 
		   }. % }}}

% handle stop message % {{{
handle_call(die, _, State) -> 
	{ stop, normal, ok, State }; % }}}

handle_call(Request, From, State) ->  % {{{
%	io:format("handle_call(~p,~p,~p) ~n", [ Request, From, State ]),
	{ reply, ok, State }. % }}}

handle_cast(_Request, State) ->  % {{{
%	io:format("handle_cast(~p,~p) ~n", [ _Request, State ]),
	{ noreply, State }. % }}}

terminate(_Reason, _State) ->  % {{{
%	io:format("~p:terminate(~p, ~p)~n", [?MODULE, _Reason, _State]),
	ok. % }}}

handle_info(_Request, State) -> % {{{
%	io:format("handle_info(~p,~p) ~n", [ _Request, State ]),
	{noreply, State}. % }}}

%%% ---------------------------------------------------------------------------
%%%
%%% internal function definitions
%%%
